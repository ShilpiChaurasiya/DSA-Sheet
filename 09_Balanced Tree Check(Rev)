class Tree
{
    
    //Function to check whether a binary tree is balanced or not.
    boolean isBalanced(Node root)
    {
	// Your code here
	   return dfsHeight(root) != -1;
    }
    int dfsHeight(Node root)
    {
        if(root == null)
        return 0;
        
        int lh = dfsHeight(root.left);
        if(lh == -1)
        return -1;
        
        int rh = dfsHeight(root.right);
        if(rh == -1)
        return -1;
        
        if(Math.abs(lh-rh)>1)
        return -1;
        
        return Math.max(lh, rh)+1;
    }
}

2. Brute force

class Tree
{
    
    //Function to check whether a binary tree is balanced or not.
    boolean isBalanced(Node root)
    {
	// Your code here
	   if(root == null)
	   return true;
	   
	   int lh = height(root.left);
	   int rh = height(root.right);
	   
	   if(Math.abs(lh-rh)<=1 && isBalanced(root.left) && isBalanced(root.right))
	   return true;
	   
	   return false;
    }
    int height(Node root)
    {
        if(root == null)
        return 0;
        
        int lh = height(root.left);
        int rh = height(root.right);
        
        return Math.max(lh, rh)+1;
    }
}

