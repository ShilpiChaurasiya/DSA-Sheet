Time complexity = O(n) 
Space Complexity = O(n)
(Both)


class Solution {
    // Function to return list containing elements of left view of binary tree.
    ArrayList<Integer> leftView(Node root) {
        // code here
        ArrayList<Integer> ans = new ArrayList<>();
        Queue<Node> q = new LinkedList<>();
        
        if(root != null)
        q.offer(root);
        
        while(!q.isEmpty())
        {
            int size = q.size();
            for(int i=0;i<size;i++)
            {
                Node node = q.poll();
                if(i == 0)
                ans.add(node.data);
                
                if(node.left != null)
                q.offer(node.left);
                
                if(node.right != null)
                q.offer(node.right);
            }
            
        }
        return ans;
    }
}


2. Another Approach using Recursive Call


class Solution {
    // Function to return list containing elements of left view of binary tree.
    ArrayList<Integer> leftView(Node root) {
        // code here
        ArrayList<Integer> ans = new ArrayList<>();
        levelorder(root,ans,0);
        return ans;
    }
    void levelorder(Node root, ArrayList<Integer> list, int level)
    {
        if(root == null)
        return;

   // If this is the first node of its level
        if(level == list.size())
        list.add(root.data);
        
        levelorder(root.left, list, level+1);
        levelorder(root.right, list, level+1);
        
        
    }
}
