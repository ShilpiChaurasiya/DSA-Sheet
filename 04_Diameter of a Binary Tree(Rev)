1.Brute Force


class Solution {
    
    // Function to return the diameter of a Binary Tree.
    int diameter(Node root) {
        return myDia(root);
    }
    public int myDia(Node root)
    {
        if(root == null)
        return 0;
        
        int lh = height(root.left);
        int rh = height(root.right);
        
        int maxi =  lh+rh+1;
        int ld = myDia(root.left);
        int rd = myDia(root.right);
        
        return Math.max(Math.max(ld, rd), maxi);
    }
    public int height(Node root)
    {
        if(root == null)
        return 0;
        
        return 1+Math.max(height(root.left) ,height(root.right));
    }
}




2. Optimized

class Solution {
    
    // Function to return the diameter of a Binary Tree.
    int diameter(Node root) {
        int[] dia = new int[1];
         height(root, dia);
         return dia[0];
    }
    public int height(Node root, int[] dia)
    {
        if(root == null)
        return 0;
        int lh = height(root.left, dia);
        int rh = height(root.right, dia);
        dia[0] = Math.max(dia[0], lh+rh+1);
      
        return Math.max(lh, rh)+1;
    }
}



3.Another approach




class Solution {
     int maxi = 0;
    // Function to return the diameter of a Binary Tree.
    int diameter(Node root) {
          height(root);
          return maxi+1; //to return maximum number of nodes rather then edges
    }
    public int height(Node root)
    {
        if(root == null)
        return 0;
        int lh = height(root.left);
        int rh = height(root.right);
        maxi = Math.max(maxi, lh+rh);
      
        return Math.max(lh, rh)+1;
    }
}

